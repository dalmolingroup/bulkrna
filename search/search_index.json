{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction dalmolingroup/bulkrna is an analysis pipeline for pre-processing, alignment and quantification of bulk RNA-Seq data. The pipeline is built using Nextflow , a workflow tool to run tasks across multiple compute infrastructures in a very portable manner. It uses Docker/Singularity containers making installation trivial and results highly reproducible. The Nextflow DSL2 implementation of this pipeline uses one container per process which makes it much easier to maintain and update software dependencies. Where possible, these processes have been submitted to and installed from nf-core/modules in order to make them available to all nf-core pipelines, and to everyone within the Nextflow community! Pipeline summary Read QC ( FastQC ) Read trimming ( fastp ) Alignment and quantification ( kallisto ) Import quantifications into a count matrix, at gene and transcript level( tximport ) Present QC for trimmed reads and alignment ( MultiQC ) Quick Start Install Nextflow ( >=22.10.1 ) Install any of Docker , Singularity (you can follow this tutorial ), Podman , Shifter or Charliecloud for full pipeline reproducibility (you can use Conda both to install Nextflow itself and also to manage software within pipelines. Please only use it within pipelines as a last resort; see docs ) . Download the pipeline and test it on a minimal dataset with a single command: nextflow run dalmolingroup/bulkrna -profile test,YOURPROFILE --outdir <OUTDIR> For example, run the test with Docker: nextflow run dalmolingroup/bulkrna -profile test,docker --outdir bulkrna_results Note that some form of configuration will be needed so that Nextflow knows how to fetch the required software. This is usually done in the form of a config profile ( YOURPROFILE in the example command above). You can chain multiple config profiles in a comma-separated string. The pipeline comes with config profiles called docker , singularity , podman , shifter , charliecloud and conda which instruct the pipeline to use the named tool for software management. For example, -profile test,docker . Please check nf-core/configs to see if a custom config file to run nf-core pipelines already exists for your Institute. If so, you can simply use -profile <institute> in your command. This will enable either docker or singularity and set the appropriate execution settings for your local compute environment. If you are using singularity , please use the nf-core download command to download images first, before running the pipeline. Setting the NXF_SINGULARITY_CACHEDIR or singularity.cacheDir Nextflow options enables you to store and re-use the images from a central location for future pipeline runs. If you are using conda , it is highly recommended to use the NXF_CONDA_CACHEDIR or conda.cacheDir settings to store the environments in a central location for future pipeline runs. Start running your own analysis! nextflow run dalmolingroup/bulkrna --input samplesheet.csv --outdir <OUTDIR> --transcriptome <PATH TO TRANSCRIPTOME FASTA> --gtf <PATH TO GTF FILE> -profile <docker/singularity/podman/shifter/charliecloud/conda/institute> References To acquire reference transcriptome and GTF files to use in your execution, we recommend using the Ensembl database. Credits dalmolingroup/bulkrna was originally written by Jo\u00e3o Cavalcante. Contributions and Support If you would like to contribute to this pipeline, please see the contributing guidelines . Citations An extensive list of references for the tools used by the pipeline can be found in the CITATIONS.md file. This pipeline uses code and infrastructure developed and maintained by the nf-core community, reused here under the MIT license . The nf-core framework for community-curated bioinformatics pipelines. Philip Ewels, Alexander Peltzer, Sven Fillinger, Harshil Patel, Johannes Alneberg, Andreas Wilm, Maxime Ulysse Garcia, Paolo Di Tommaso & Sven Nahnsen. Nat Biotechnol. 2020 Feb 13. doi: 10.1038/s41587-020-0439-x .","title":"Home"},{"location":"#introduction","text":"dalmolingroup/bulkrna is an analysis pipeline for pre-processing, alignment and quantification of bulk RNA-Seq data. The pipeline is built using Nextflow , a workflow tool to run tasks across multiple compute infrastructures in a very portable manner. It uses Docker/Singularity containers making installation trivial and results highly reproducible. The Nextflow DSL2 implementation of this pipeline uses one container per process which makes it much easier to maintain and update software dependencies. Where possible, these processes have been submitted to and installed from nf-core/modules in order to make them available to all nf-core pipelines, and to everyone within the Nextflow community!","title":"Introduction"},{"location":"#pipeline-summary","text":"Read QC ( FastQC ) Read trimming ( fastp ) Alignment and quantification ( kallisto ) Import quantifications into a count matrix, at gene and transcript level( tximport ) Present QC for trimmed reads and alignment ( MultiQC )","title":"Pipeline summary"},{"location":"#quick-start","text":"Install Nextflow ( >=22.10.1 ) Install any of Docker , Singularity (you can follow this tutorial ), Podman , Shifter or Charliecloud for full pipeline reproducibility (you can use Conda both to install Nextflow itself and also to manage software within pipelines. Please only use it within pipelines as a last resort; see docs ) . Download the pipeline and test it on a minimal dataset with a single command: nextflow run dalmolingroup/bulkrna -profile test,YOURPROFILE --outdir <OUTDIR> For example, run the test with Docker: nextflow run dalmolingroup/bulkrna -profile test,docker --outdir bulkrna_results Note that some form of configuration will be needed so that Nextflow knows how to fetch the required software. This is usually done in the form of a config profile ( YOURPROFILE in the example command above). You can chain multiple config profiles in a comma-separated string. The pipeline comes with config profiles called docker , singularity , podman , shifter , charliecloud and conda which instruct the pipeline to use the named tool for software management. For example, -profile test,docker . Please check nf-core/configs to see if a custom config file to run nf-core pipelines already exists for your Institute. If so, you can simply use -profile <institute> in your command. This will enable either docker or singularity and set the appropriate execution settings for your local compute environment. If you are using singularity , please use the nf-core download command to download images first, before running the pipeline. Setting the NXF_SINGULARITY_CACHEDIR or singularity.cacheDir Nextflow options enables you to store and re-use the images from a central location for future pipeline runs. If you are using conda , it is highly recommended to use the NXF_CONDA_CACHEDIR or conda.cacheDir settings to store the environments in a central location for future pipeline runs. Start running your own analysis! nextflow run dalmolingroup/bulkrna --input samplesheet.csv --outdir <OUTDIR> --transcriptome <PATH TO TRANSCRIPTOME FASTA> --gtf <PATH TO GTF FILE> -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>","title":"Quick Start"},{"location":"#references","text":"To acquire reference transcriptome and GTF files to use in your execution, we recommend using the Ensembl database.","title":"References"},{"location":"#credits","text":"dalmolingroup/bulkrna was originally written by Jo\u00e3o Cavalcante.","title":"Credits"},{"location":"#contributions-and-support","text":"If you would like to contribute to this pipeline, please see the contributing guidelines .","title":"Contributions and Support"},{"location":"#citations","text":"An extensive list of references for the tools used by the pipeline can be found in the CITATIONS.md file. This pipeline uses code and infrastructure developed and maintained by the nf-core community, reused here under the MIT license . The nf-core framework for community-curated bioinformatics pipelines. Philip Ewels, Alexander Peltzer, Sven Fillinger, Harshil Patel, Johannes Alneberg, Andreas Wilm, Maxime Ulysse Garcia, Paolo Di Tommaso & Sven Nahnsen. Nat Biotechnol. 2020 Feb 13. doi: 10.1038/s41587-020-0439-x .","title":"Citations"},{"location":"CITATIONS/","text":"dalmolingroup/bulkrna: Citations nf-core Ewels PA, Peltzer A, Fillinger S, Patel H, Alneberg J, Wilm A, Garcia MU, Di Tommaso P, Nahnsen S. The nf-core framework for community-curated bioinformatics pipelines. Nat Biotechnol. 2020 Mar;38(3):276-278. doi: 10.1038/s41587-020-0439-x. PubMed PMID: 32055031. Nextflow Di Tommaso P, Chatzou M, Floden EW, Barja PP, Palumbo E, Notredame C. Nextflow enables reproducible computational workflows. Nat Biotechnol. 2017 Apr 11;35(4):316-319. doi: 10.1038/nbt.3820. PubMed PMID: 28398311. Pipeline tools FastQC MultiQC Ewels P, Magnusson M, Lundin S, K\u00e4ller M. MultiQC: summarize analysis results for multiple tools and samples in a single report. Bioinformatics. 2016 Oct 1;32(19):3047-8. doi: 10.1093/bioinformatics/btw354. Epub 2016 Jun 16. PubMed PMID: 27312411; PubMed Central PMCID: PMC5039924. fastp Shifu Chen, Yanqing Zhou, Yaru Chen, Jia Gu; fastp: an ultra-fast all-in-one FASTQ preprocessor, Bioinformatics, Volume 34, Issue 17, 1 September 2018, Pages i884\u2013i890, https://doi.org/10.1093/bioinformatics/bty560 Kallisto Nicolas L Bray, Harold Pimentel, P\u00e1ll Melsted and Lior Pachter, Near-optimal probabilistic RNA-seq quantification, Nature Biotechnology 34, 525\u2013527 (2016), doi:10.1038/nbt.3519 txImport Soneson C, Love MI, Robinson MD (2015). \u201cDifferential analyses for RNA-seq: transcript-level estimates improve gene-level inferences.\u201d F1000Research, 4. doi: 10.12688/f1000research.7563.1. Software packaging/containerisation tools Anaconda Anaconda Software Distribution. Computer software. Vers. 2-2.4.0. Anaconda, Nov. 2016. Web. Bioconda Gr\u00fcning B, Dale R, Sj\u00f6din A, Chapman BA, Rowe J, Tomkins-Tinch CH, Valieris R, K\u00f6ster J; Bioconda Team. Bioconda: sustainable and comprehensive software distribution for the life sciences. Nat Methods. 2018 Jul;15(7):475-476. doi: 10.1038/s41592-018-0046-7. PubMed PMID: 29967506. BioContainers da Veiga Leprevost F, Gr\u00fcning B, Aflitos SA, R\u00f6st HL, Uszkoreit J, Barsnes H, Vaudel M, Moreno P, Gatto L, Weber J, Bai M, Jimenez RC, Sachsenberg T, Pfeuffer J, Alvarez RV, Griss J, Nesvizhskii AI, Perez-Riverol Y. BioContainers: an open-source and community-driven framework for software standardization. Bioinformatics. 2017 Aug 15;33(16):2580-2582. doi: 10.1093/bioinformatics/btx192. PubMed PMID: 28379341; PubMed Central PMCID: PMC5870671. Docker Singularity Kurtzer GM, Sochat V, Bauer MW. Singularity: Scientific containers for mobility of compute. PLoS One. 2017 May 11;12(5):e0177459. doi: 10.1371/journal.pone.0177459. eCollection 2017. PubMed PMID: 28494014; PubMed Central PMCID: PMC5426675.","title":"Citations"},{"location":"CITATIONS/#dalmolingroupbulkrna-citations","text":"","title":"dalmolingroup/bulkrna: Citations"},{"location":"CITATIONS/#nf-core","text":"Ewels PA, Peltzer A, Fillinger S, Patel H, Alneberg J, Wilm A, Garcia MU, Di Tommaso P, Nahnsen S. The nf-core framework for community-curated bioinformatics pipelines. Nat Biotechnol. 2020 Mar;38(3):276-278. doi: 10.1038/s41587-020-0439-x. PubMed PMID: 32055031.","title":"nf-core"},{"location":"CITATIONS/#nextflow","text":"Di Tommaso P, Chatzou M, Floden EW, Barja PP, Palumbo E, Notredame C. Nextflow enables reproducible computational workflows. Nat Biotechnol. 2017 Apr 11;35(4):316-319. doi: 10.1038/nbt.3820. PubMed PMID: 28398311.","title":"Nextflow"},{"location":"CITATIONS/#pipeline-tools","text":"FastQC MultiQC Ewels P, Magnusson M, Lundin S, K\u00e4ller M. MultiQC: summarize analysis results for multiple tools and samples in a single report. Bioinformatics. 2016 Oct 1;32(19):3047-8. doi: 10.1093/bioinformatics/btw354. Epub 2016 Jun 16. PubMed PMID: 27312411; PubMed Central PMCID: PMC5039924. fastp Shifu Chen, Yanqing Zhou, Yaru Chen, Jia Gu; fastp: an ultra-fast all-in-one FASTQ preprocessor, Bioinformatics, Volume 34, Issue 17, 1 September 2018, Pages i884\u2013i890, https://doi.org/10.1093/bioinformatics/bty560 Kallisto Nicolas L Bray, Harold Pimentel, P\u00e1ll Melsted and Lior Pachter, Near-optimal probabilistic RNA-seq quantification, Nature Biotechnology 34, 525\u2013527 (2016), doi:10.1038/nbt.3519 txImport Soneson C, Love MI, Robinson MD (2015). \u201cDifferential analyses for RNA-seq: transcript-level estimates improve gene-level inferences.\u201d F1000Research, 4. doi: 10.12688/f1000research.7563.1.","title":"Pipeline tools"},{"location":"CITATIONS/#software-packagingcontainerisation-tools","text":"Anaconda Anaconda Software Distribution. Computer software. Vers. 2-2.4.0. Anaconda, Nov. 2016. Web. Bioconda Gr\u00fcning B, Dale R, Sj\u00f6din A, Chapman BA, Rowe J, Tomkins-Tinch CH, Valieris R, K\u00f6ster J; Bioconda Team. Bioconda: sustainable and comprehensive software distribution for the life sciences. Nat Methods. 2018 Jul;15(7):475-476. doi: 10.1038/s41592-018-0046-7. PubMed PMID: 29967506. BioContainers da Veiga Leprevost F, Gr\u00fcning B, Aflitos SA, R\u00f6st HL, Uszkoreit J, Barsnes H, Vaudel M, Moreno P, Gatto L, Weber J, Bai M, Jimenez RC, Sachsenberg T, Pfeuffer J, Alvarez RV, Griss J, Nesvizhskii AI, Perez-Riverol Y. BioContainers: an open-source and community-driven framework for software standardization. Bioinformatics. 2017 Aug 15;33(16):2580-2582. doi: 10.1093/bioinformatics/btx192. PubMed PMID: 28379341; PubMed Central PMCID: PMC5870671. Docker Singularity Kurtzer GM, Sochat V, Bauer MW. Singularity: Scientific containers for mobility of compute. PLoS One. 2017 May 11;12(5):e0177459. doi: 10.1371/journal.pone.0177459. eCollection 2017. PubMed PMID: 28494014; PubMed Central PMCID: PMC5426675.","title":"Software packaging/containerisation tools"},{"location":"output/","text":"dalmolingroup/bulkrna: Output Introduction This document describes the output produced by the pipeline. Most of the plots are taken from the MultiQC report, which summarises results at the end of the pipeline. The directories listed below will be created in the results directory after the pipeline has finished. All paths are relative to the top-level results directory. Pipeline overview The pipeline is built using Nextflow and processes data using the following steps: FastQC - Raw read QC fastp - fastp reports (in HTML and JSON) about the trimming process FastQC_trimmed - Trimmed read QC - will be included in MultiQC results Kallisto - Kallisto quantification results TxImport - Aggregate quantification results at gene and transcript levels MultiQC - Aggregate report describing results and QC from the whole pipeline Pipeline information - Report metrics generated during the workflow execution FastQC Output files - `fastqc/` - `*_fastqc.html`: FastQC report containing quality metrics. - `*_fastqc.zip`: Zip archive containing the FastQC report, tab-delimited data file and plot images. FastQC gives general quality metrics about your sequenced reads. It provides information about the quality score distribution across your reads, per base sequence content (%A/T/G/C), adapter contamination and overrepresented sequences. For further reading and documentation see the FastQC help pages . NB: The FastQC plots displayed in the MultiQC report shows trimmed reads (see fastp ). fastp fastp is an ultra-fast all-in-one FASTQ preprocessor. Used in this workflow for adapter trimming and low-quality sequence removal. fastp *.html - HTML report generated by fastp *.json - JSON report generated by fastp Kallisto kallisto is used here for aligning and quantifying targets against a reference transcriptome. kallisto {sample_id} - Abundances quantified from said sample TxImport tximport is used here to summarize transcript and gene-level counts from Kallisto. tximport gene_tpm.tsv - Gene-level estimates (transcript-per-million) for the samples gene_counts.tsv - Gene-level estimates (raw counts) for the samples transcript_tpm.tsv - Transcript-level estimates (transcript-per-million) for the samples transcript_counts.tsv - Transcript-level estimates (raw counts) for the samples transcript_scaled_tpm.tsv - Transcript-level estimates (transcript-per-million) for the samples, scaled up to library size (scaledTPM) transcript_scaled_counts.tsv - Transcript-level estimates (raw counts) for the samples, scaled up to library size (scaledTPM) MultiQC Output files - `multiqc/` - `multiqc_report.html`: a standalone HTML file that can be viewed in your web browser. - `multiqc_data/`: directory containing parsed statistics from the different tools used in the pipeline. - `multiqc_plots/`: directory containing static images from the report in various formats. MultiQC is a visualization tool that generates a single HTML report summarising all samples in your project. Most of the pipeline QC results are visualised in the report and further statistics are available in the report data directory. Results generated by MultiQC collate pipeline QC from supported tools e.g. FastQC. The pipeline has special steps which also allow the software versions to be reported in the MultiQC output for future traceability. For more information about how to use MultiQC reports, see http://multiqc.info . Pipeline information Output files - `pipeline_info/` - Reports generated by Nextflow: `execution_report.html`, `execution_timeline.html`, `execution_trace.txt` and `pipeline_dag.dot`/`pipeline_dag.svg`. - Reports generated by the pipeline: `pipeline_report.html`, `pipeline_report.txt` and `software_versions.yml`. The `pipeline_report*` files will only be present if the `--email` / `--email_on_fail` parameter's are used when running the pipeline. - Reformatted samplesheet files used as input to the pipeline: `samplesheet.valid.csv`. Nextflow provides excellent functionality for generating various reports relevant to the running and execution of the pipeline. This will allow you to troubleshoot errors with the running of the pipeline, and also provide you with other information such as launch commands, run times and resource usage.","title":"Output"},{"location":"output/#dalmolingroupbulkrna-output","text":"","title":"dalmolingroup/bulkrna: Output"},{"location":"output/#introduction","text":"This document describes the output produced by the pipeline. Most of the plots are taken from the MultiQC report, which summarises results at the end of the pipeline. The directories listed below will be created in the results directory after the pipeline has finished. All paths are relative to the top-level results directory.","title":"Introduction"},{"location":"output/#pipeline-overview","text":"The pipeline is built using Nextflow and processes data using the following steps: FastQC - Raw read QC fastp - fastp reports (in HTML and JSON) about the trimming process FastQC_trimmed - Trimmed read QC - will be included in MultiQC results Kallisto - Kallisto quantification results TxImport - Aggregate quantification results at gene and transcript levels MultiQC - Aggregate report describing results and QC from the whole pipeline Pipeline information - Report metrics generated during the workflow execution","title":"Pipeline overview"},{"location":"output/#fastqc","text":"Output files - `fastqc/` - `*_fastqc.html`: FastQC report containing quality metrics. - `*_fastqc.zip`: Zip archive containing the FastQC report, tab-delimited data file and plot images. FastQC gives general quality metrics about your sequenced reads. It provides information about the quality score distribution across your reads, per base sequence content (%A/T/G/C), adapter contamination and overrepresented sequences. For further reading and documentation see the FastQC help pages . NB: The FastQC plots displayed in the MultiQC report shows trimmed reads (see fastp ).","title":"FastQC"},{"location":"output/#fastp","text":"fastp is an ultra-fast all-in-one FASTQ preprocessor. Used in this workflow for adapter trimming and low-quality sequence removal. fastp *.html - HTML report generated by fastp *.json - JSON report generated by fastp","title":"fastp"},{"location":"output/#kallisto","text":"kallisto is used here for aligning and quantifying targets against a reference transcriptome. kallisto {sample_id} - Abundances quantified from said sample","title":"Kallisto"},{"location":"output/#tximport","text":"tximport is used here to summarize transcript and gene-level counts from Kallisto. tximport gene_tpm.tsv - Gene-level estimates (transcript-per-million) for the samples gene_counts.tsv - Gene-level estimates (raw counts) for the samples transcript_tpm.tsv - Transcript-level estimates (transcript-per-million) for the samples transcript_counts.tsv - Transcript-level estimates (raw counts) for the samples transcript_scaled_tpm.tsv - Transcript-level estimates (transcript-per-million) for the samples, scaled up to library size (scaledTPM) transcript_scaled_counts.tsv - Transcript-level estimates (raw counts) for the samples, scaled up to library size (scaledTPM)","title":"TxImport"},{"location":"output/#multiqc","text":"Output files - `multiqc/` - `multiqc_report.html`: a standalone HTML file that can be viewed in your web browser. - `multiqc_data/`: directory containing parsed statistics from the different tools used in the pipeline. - `multiqc_plots/`: directory containing static images from the report in various formats. MultiQC is a visualization tool that generates a single HTML report summarising all samples in your project. Most of the pipeline QC results are visualised in the report and further statistics are available in the report data directory. Results generated by MultiQC collate pipeline QC from supported tools e.g. FastQC. The pipeline has special steps which also allow the software versions to be reported in the MultiQC output for future traceability. For more information about how to use MultiQC reports, see http://multiqc.info .","title":"MultiQC"},{"location":"output/#pipeline-information","text":"Output files - `pipeline_info/` - Reports generated by Nextflow: `execution_report.html`, `execution_timeline.html`, `execution_trace.txt` and `pipeline_dag.dot`/`pipeline_dag.svg`. - Reports generated by the pipeline: `pipeline_report.html`, `pipeline_report.txt` and `software_versions.yml`. The `pipeline_report*` files will only be present if the `--email` / `--email_on_fail` parameter's are used when running the pipeline. - Reformatted samplesheet files used as input to the pipeline: `samplesheet.valid.csv`. Nextflow provides excellent functionality for generating various reports relevant to the running and execution of the pipeline. This will allow you to troubleshoot errors with the running of the pipeline, and also provide you with other information such as launch commands, run times and resource usage.","title":"Pipeline information"},{"location":"params/","text":"dalmolingroup/bulkrna pipeline parameters Workflow for pre-processing, alignment and quantification of bulk RNA-Seq data Input/output options Define where the pipeline should find input data and save output data. Parameter Description Type Default input Path to comma-separated file containing information about the samples in the experiment. Help You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. string outdir The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure. string email Email address for completion summary. Help Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file ( ~/.nextflow/config ) then you don't need to specify this on the command line for every run. string multiqc_title MultiQC report title. Printed as page header, used for filename if not otherwise specified. string FastP trimming options Define fastp parameters for trimming Parameter Description Type Default reads_minlength reads shorter than length_required will be discarded integer 15 fastp_adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file string https://gist.githubusercontent.com/jvfe/2d569adf47791b9d1e1b4ff810d410b8/raw/e970485d7fe2c9a5b501966eb26e9eb51789c86d/sample_adapters.fa fastp_save_trimmed_fail save reads that cannot pass the filters boolean fastp_save_merged for paired-end input, merge each pair of reads into a single read if they are overlapped boolean fastp_qualified_quality the quality value that a base is qualified integer 15 fastp_cut_mean_quality the mean quality requirement option shared by the cut_front and cut_tail sliding windows integer 15 Kallisto options Options for the alignment/quantification Parameter Description Type Default transcriptome Path to the transcriptome FASTA file to use for reference string None index string None fragment_length Estimated average fragment length integer 100 fragment_length_sd Estimated standard deviation of fragment length integer 1 TXimport options Options for importing Kallisto results into a count matrix Parameter Description Type Default gtf string None Institutional config options Parameters used to describe centralised config profiles. These should not be edited. Parameter Description Type Default custom_config_version Git commit id for Institutional configs. string master custom_config_base Base directory for Institutional configs. Help If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter. string https://raw.githubusercontent.com/nf-core/configs/master config_profile_name Institutional config name. string config_profile_description Institutional config description. string config_profile_contact Institutional config contact information. string config_profile_url Institutional config URL link. string Max job request options Set the top limit for requested resources for any single job. Parameter Description Type Default max_cpus Maximum number of CPUs that can be requested for any single job. Help Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. --max_cpus 1 integer 16 max_memory Maximum amount of memory that can be requested for any single job. Help Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. --max_memory '8.GB' string 128.GB max_time Maximum amount of time that can be requested for any single job. Help Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. --max_time '2.h' string 240.h Generic options Less common options for the pipeline, typically set in a config file. Parameter Description Type Default help Display help text. boolean publish_dir_mode Method used to save pipeline results to output directory. Help The Nextflow publishDir option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See Nextflow docs for details. string copy email_on_fail Email address for completion summary, only when pipeline fails. Help An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully. string plaintext_email Send plain-text email instead of HTML. boolean max_multiqc_email_size File size limit when attaching MultiQC reports to summary emails. string 25.MB monochrome_logs Do not use coloured log outputs. boolean hook_url Incoming hook URL for messaging service Help Incoming hook URL for messaging service. Currently, only MS Teams is supported. string multiqc_config Custom config file to supply to MultiQC. string multiqc_logo Custom logo file to supply to MultiQC. File name must also be set in the MultiQC config file string multiqc_methods_description Custom MultiQC yaml file containing HTML including a methods description. string tracedir Directory to keep pipeline Nextflow logs and reports. string ${params.outdir}/pipeline_info validate_params Boolean whether to validate parameters against the schema at runtime boolean True show_hidden_params Show all params when using --help Help By default, parameters set as hidden in the schema are not shown on the command line when a user runs with --help . Specifying this option will tell the pipeline to show all parameters. boolean","title":"Parameters"},{"location":"params/#dalmolingroupbulkrna-pipeline-parameters","text":"Workflow for pre-processing, alignment and quantification of bulk RNA-Seq data","title":"dalmolingroup/bulkrna pipeline parameters"},{"location":"params/#inputoutput-options","text":"Define where the pipeline should find input data and save output data. Parameter Description Type Default input Path to comma-separated file containing information about the samples in the experiment. Help You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. string outdir The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure. string email Email address for completion summary. Help Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file ( ~/.nextflow/config ) then you don't need to specify this on the command line for every run. string multiqc_title MultiQC report title. Printed as page header, used for filename if not otherwise specified. string","title":"Input/output options"},{"location":"params/#fastp-trimming-options","text":"Define fastp parameters for trimming Parameter Description Type Default reads_minlength reads shorter than length_required will be discarded integer 15 fastp_adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file string https://gist.githubusercontent.com/jvfe/2d569adf47791b9d1e1b4ff810d410b8/raw/e970485d7fe2c9a5b501966eb26e9eb51789c86d/sample_adapters.fa fastp_save_trimmed_fail save reads that cannot pass the filters boolean fastp_save_merged for paired-end input, merge each pair of reads into a single read if they are overlapped boolean fastp_qualified_quality the quality value that a base is qualified integer 15 fastp_cut_mean_quality the mean quality requirement option shared by the cut_front and cut_tail sliding windows integer 15","title":"FastP trimming options"},{"location":"params/#kallisto-options","text":"Options for the alignment/quantification Parameter Description Type Default transcriptome Path to the transcriptome FASTA file to use for reference string None index string None fragment_length Estimated average fragment length integer 100 fragment_length_sd Estimated standard deviation of fragment length integer 1","title":"Kallisto options"},{"location":"params/#tximport-options","text":"Options for importing Kallisto results into a count matrix Parameter Description Type Default gtf string None","title":"TXimport options"},{"location":"params/#institutional-config-options","text":"Parameters used to describe centralised config profiles. These should not be edited. Parameter Description Type Default custom_config_version Git commit id for Institutional configs. string master custom_config_base Base directory for Institutional configs. Help If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter. string https://raw.githubusercontent.com/nf-core/configs/master config_profile_name Institutional config name. string config_profile_description Institutional config description. string config_profile_contact Institutional config contact information. string config_profile_url Institutional config URL link. string","title":"Institutional config options"},{"location":"params/#max-job-request-options","text":"Set the top limit for requested resources for any single job. Parameter Description Type Default max_cpus Maximum number of CPUs that can be requested for any single job. Help Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. --max_cpus 1 integer 16 max_memory Maximum amount of memory that can be requested for any single job. Help Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. --max_memory '8.GB' string 128.GB max_time Maximum amount of time that can be requested for any single job. Help Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. --max_time '2.h' string 240.h","title":"Max job request options"},{"location":"params/#generic-options","text":"Less common options for the pipeline, typically set in a config file. Parameter Description Type Default help Display help text. boolean publish_dir_mode Method used to save pipeline results to output directory. Help The Nextflow publishDir option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See Nextflow docs for details. string copy email_on_fail Email address for completion summary, only when pipeline fails. Help An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully. string plaintext_email Send plain-text email instead of HTML. boolean max_multiqc_email_size File size limit when attaching MultiQC reports to summary emails. string 25.MB monochrome_logs Do not use coloured log outputs. boolean hook_url Incoming hook URL for messaging service Help Incoming hook URL for messaging service. Currently, only MS Teams is supported. string multiqc_config Custom config file to supply to MultiQC. string multiqc_logo Custom logo file to supply to MultiQC. File name must also be set in the MultiQC config file string multiqc_methods_description Custom MultiQC yaml file containing HTML including a methods description. string tracedir Directory to keep pipeline Nextflow logs and reports. string ${params.outdir}/pipeline_info validate_params Boolean whether to validate parameters against the schema at runtime boolean True show_hidden_params Show all params when using --help Help By default, parameters set as hidden in the schema are not shown on the command line when a user runs with --help . Specifying this option will tell the pipeline to show all parameters. boolean","title":"Generic options"},{"location":"usage/","text":"dalmolingroup/bulkrna: Usage Documentation of pipeline parameters is generated automatically from the pipeline schema and can no longer be found in markdown files. Introduction Samplesheet input You will need to create a samplesheet with information about the samples you would like to analyse before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row as shown in the examples below. --input '[path to samplesheet file]' Multiple runs of the same sample The sample identifiers have to be the same when you have re-sequenced the same sample more than once e.g. to increase sequencing depth. The pipeline will concatenate the raw reads before performing any downstream analysis. Below is an example for the same sample sequenced across 3 lanes: sample,fastq_1,fastq_2 CONTROL_REP1,AEG588A1_S1_L002_R1_001.fastq.gz,AEG588A1_S1_L002_R2_001.fastq.gz CONTROL_REP1,AEG588A1_S1_L003_R1_001.fastq.gz,AEG588A1_S1_L003_R2_001.fastq.gz CONTROL_REP1,AEG588A1_S1_L004_R1_001.fastq.gz,AEG588A1_S1_L004_R2_001.fastq.gz Full samplesheet The pipeline will auto-detect whether a sample is single- or paired-end using the information provided in the samplesheet. The samplesheet can have as many columns as you desire, however, there is a strict requirement for the first 3 columns to match those defined in the table below. A final samplesheet file consisting of both single- and paired-end data may look something like the one below. This is for 6 samples, where TREATMENT_REP3 has been sequenced twice. sample,fastq_1,fastq_2 CONTROL_REP1,AEG588A1_S1_L002_R1_001.fastq.gz,AEG588A1_S1_L002_R2_001.fastq.gz CONTROL_REP2,AEG588A2_S2_L002_R1_001.fastq.gz,AEG588A2_S2_L002_R2_001.fastq.gz CONTROL_REP3,AEG588A3_S3_L002_R1_001.fastq.gz,AEG588A3_S3_L002_R2_001.fastq.gz TREATMENT_REP1,AEG588A4_S4_L003_R1_001.fastq.gz, TREATMENT_REP2,AEG588A5_S5_L003_R1_001.fastq.gz, TREATMENT_REP3,AEG588A6_S6_L003_R1_001.fastq.gz, TREATMENT_REP3,AEG588A6_S6_L004_R1_001.fastq.gz, Column Description sample Custom sample name. This entry will be identical for multiple sequencing libraries/runs from the same sample. Spaces in sample names are automatically converted to underscores ( _ ). fastq_1 Full path to FastQ file for Illumina short reads 1. File has to be gzipped and have the extension \".fastq.gz\" or \".fq.gz\". fastq_2 Full path to FastQ file for Illumina short reads 2. File has to be gzipped and have the extension \".fastq.gz\" or \".fq.gz\". An example samplesheet has been provided with the pipeline. Running the pipeline The typical command for running the pipeline is as follows: nextflow run dalmolingroup/bulkrna --input samplesheet.csv --outdir <OUTDIR> --transcriptome <PATH TO TRANSCRIPTOME FASTA> --gtf <PATH TO GTF FILE> -profile docker This will launch the pipeline with the docker configuration profile. See below for more information about profiles. Note that the pipeline will create the following files in your working directory: work # Directory containing the nextflow working files <OUTDIR> # Finished results in specified location (defined with --outdir) .nextflow_log # Log file from Nextflow # Other nextflow hidden files, eg. history of pipeline runs and old logs. Updating the pipeline When you run the above command, Nextflow automatically pulls the pipeline code from GitHub and stores it as a cached version. When running the pipeline after this, it will always use the cached version if available - even if the pipeline has been updated since. To make sure that you're running the latest version of the pipeline, make sure that you regularly update the cached version of the pipeline: nextflow pull dalmolingroup/bulkrna Reproducibility It is a good idea to specify a pipeline version when running the pipeline on your data. This ensures that a specific version of the pipeline code and software are used when you run your pipeline. If you keep using the same tag, you'll be running the same version of the pipeline, even if there have been changes to the code since. First, go to the dalmolingroup/bulkrna releases page and find the latest version number - numeric only (eg. 1.3.1 ). Then specify this when running the pipeline with -r (one hyphen) - eg. -r 1.3.1 . This version number will be logged in reports when you run the pipeline, so that you'll know what you used when you look back in the future. Core Nextflow arguments NB: These options are part of Nextflow and use a single hyphen (pipeline parameters use a double-hyphen). -profile Use this parameter to choose a configuration profile. Profiles can give configuration presets for different compute environments. Several generic profiles are bundled with the pipeline which instruct the pipeline to use software packaged using different methods (Docker, Singularity, Podman, Shifter, Charliecloud, Conda) - see below. When using Biocontainers, most of these software packaging methods pull Docker containers from quay.io e.g FastQC except for Singularity which directly downloads Singularity images via https hosted by the Galaxy project and Conda which downloads and installs software locally from Bioconda . We highly recommend the use of Docker or Singularity containers for full pipeline reproducibility, however when this is not possible, Conda is also supported. The pipeline also dynamically loads configurations from https://github.com/nf-core/configs when it runs, making multiple config profiles for various institutional clusters available at run time. For more information and to see if your system is available in these configs please see the nf-core/configs documentation . Note that multiple profiles can be loaded, for example: -profile test,docker - the order of arguments is important! They are loaded in sequence, so later profiles can overwrite earlier profiles. If -profile is not specified, the pipeline will run locally and expect all software to be installed and available on the PATH . This is not recommended. docker A generic configuration profile to be used with Docker singularity A generic configuration profile to be used with Singularity podman A generic configuration profile to be used with Podman shifter A generic configuration profile to be used with Shifter charliecloud A generic configuration profile to be used with Charliecloud conda A generic configuration profile to be used with Conda . Please only use Conda as a last resort i.e. when it's not possible to run the pipeline with Docker, Singularity, Podman, Shifter or Charliecloud. test A profile with a complete configuration for automated testing Includes links to test data so needs no other parameters -resume Specify this when restarting a pipeline. Nextflow will use cached results from any pipeline steps where the inputs are the same, continuing from where it got to previously. For input to be considered the same, not only the names must be identical but the files' contents as well. For more info about this parameter, see this blog post . You can also supply a run name to resume a specific run: -resume [run-name] . Use the nextflow log command to show previous run names. -c Specify the path to a specific config file (this is a core Nextflow command). See the nf-core website documentation for more information. Custom configuration Resource requests Whilst the default requirements set within the pipeline will hopefully work for most people and with most input data, you may find that you want to customise the compute resources that the pipeline requests. Each step in the pipeline has a default set of requirements for number of CPUs, memory and time. For most of the steps in the pipeline, if the job exits with any of the error codes specified here it will automatically be resubmitted with higher requests (2 x original, then 3 x original). If it still fails after the third attempt then the pipeline execution is stopped. For example, if the nf-core/rnaseq pipeline is failing after multiple re-submissions of the STAR_ALIGN process due to an exit code of 137 this would indicate that there is an out of memory issue: [62/149eb0] NOTE: Process `NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN (WT_REP1)` terminated with an error exit status (137) -- Execution is retried (1) Error executing process > 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN (WT_REP1)' Caused by: Process `NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN (WT_REP1)` terminated with an error exit status (137) Command executed: STAR \\ --genomeDir star \\ --readFilesIn WT_REP1_trimmed.fq.gz \\ --runThreadN 2 \\ --outFileNamePrefix WT_REP1. \\ <TRUNCATED> Command exit status: 137 Command output: (empty) Command error: .command.sh: line 9: 30 Killed STAR --genomeDir star --readFilesIn WT_REP1_trimmed.fq.gz --runThreadN 2 --outFileNamePrefix WT_REP1. <TRUNCATED> Work dir: /home/pipelinetest/work/9d/172ca5881234073e8d76f2a19c88fb Tip: you can replicate the issue by changing to the process work dir and entering the command `bash .command.run` To bypass this error you would need to find exactly which resources are set by the STAR_ALIGN process. The quickest way is to search for process STAR_ALIGN in the nf-core/rnaseq Github repo . We have standardised the structure of Nextflow DSL2 pipelines such that all module files will be present in the modules/ directory and so, based on the search results, the file we want is modules/nf-core/software/star/align/main.nf . If you click on the link to that file you will notice that there is a label directive at the top of the module that is set to label process_high . The Nextflow label directive allows us to organise workflow processes in separate groups which can be referenced in a configuration file to select and configure subset of processes having similar computing requirements. The default values for the process_high label are set in the pipeline's base.config which in this case is defined as 72GB. Providing you haven't set any other standard nf-core parameters to cap the maximum resources used by the pipeline then we can try and bypass the STAR_ALIGN process failure by creating a custom config file that sets at least 72GB of memory, in this case increased to 100GB. The custom config below can then be provided to the pipeline via the -c parameter as highlighted in previous sections. process { withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN' { memory = 100.GB } } NB: We specify the full process name i.e. NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN in the config file because this takes priority over the short name ( STAR_ALIGN ) and allows existing configuration using the full process name to be correctly overridden. If you get a warning suggesting that the process selector isn't recognised check that the process name has been specified correctly. Updating containers The Nextflow DSL2 implementation of this pipeline uses one container per process which makes it much easier to maintain and update software dependencies. If for some reason you need to use a different version of a particular tool with the pipeline then you just need to identify the process name and override the Nextflow container definition for that process using the withName declaration. For example, in the nf-core/viralrecon pipeline a tool called Pangolin has been used during the COVID-19 pandemic to assign lineages to SARS-CoV-2 genome sequenced samples. Given that the lineage assignments change quite frequently it doesn't make sense to re-release the nf-core/viralrecon everytime a new version of Pangolin has been released. However, you can override the default container used by the pipeline by creating a custom config file and passing it as a command-line argument via -c custom.config . Check the default version used by the pipeline in the module file for Pangolin Find the latest version of the Biocontainer available on Quay.io Create the custom config accordingly: For Docker: nextflow process { withName: PANGOLIN { container = 'quay.io/biocontainers/pangolin:3.0.5--pyhdfd78af_0' } } For Singularity: nextflow process { withName: PANGOLIN { container = 'https://depot.galaxyproject.org/singularity/pangolin:3.0.5--pyhdfd78af_0' } } For Conda: nextflow process { withName: PANGOLIN { conda = 'bioconda::pangolin=3.0.5' } } NB: If you wish to periodically update individual tool-specific results (e.g. Pangolin) generated by the pipeline then you must ensure to keep the work/ directory otherwise the -resume ability of the pipeline will be compromised and it will restart from scratch. nf-core/configs In most cases, you will only need to create a custom config as a one-off but if you and others within your organisation are likely to be running nf-core pipelines regularly and need to use the same settings regularly it may be a good idea to request that your custom config file is uploaded to the nf-core/configs git repository. Before you do this please can you test that the config file works with your pipeline of choice using the -c parameter. You can then create a pull request to the nf-core/configs repository with the addition of your config file, associated documentation file (see examples in nf-core/configs/docs ), and amending nfcore_custom.config to include your custom profile. See the main Nextflow documentation for more information about creating your own configuration files. If you have any questions or issues please send us a message on Slack on the #configs channel . Azure Resource Requests To be used with the azurebatch profile by specifying the -profile azurebatch . We recommend providing a compute params.vm_type of Standard_D16_v3 VMs by default but these options can be changed if required. Note that the choice of VM size depends on your quota and the overall workload during the analysis. For a thorough list, please refer the Azure Sizes for virtual machines in Azure . Running in the background Nextflow handles job submissions and supervises the running jobs. The Nextflow process must run until the pipeline is finished. The Nextflow -bg flag launches Nextflow in the background, detached from your terminal so that the workflow does not stop if you log out of your session. The logs are saved to a file. Alternatively, you can use screen / tmux or similar tool to create a detached session which you can log back into at a later time. Some HPC setups also allow you to run nextflow within a cluster job submitted your job scheduler (from where it submits more jobs). Nextflow memory requirements In some cases, the Nextflow Java virtual machines can start to request a large amount of memory. We recommend adding the following line to your environment to limit this (typically in ~/.bashrc or ~./bash_profile ): NXF_OPTS='-Xms1g -Xmx4g'","title":"Usage"},{"location":"usage/#dalmolingroupbulkrna-usage","text":"Documentation of pipeline parameters is generated automatically from the pipeline schema and can no longer be found in markdown files.","title":"dalmolingroup/bulkrna: Usage"},{"location":"usage/#introduction","text":"","title":"Introduction"},{"location":"usage/#samplesheet-input","text":"You will need to create a samplesheet with information about the samples you would like to analyse before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row as shown in the examples below. --input '[path to samplesheet file]'","title":"Samplesheet input"},{"location":"usage/#multiple-runs-of-the-same-sample","text":"The sample identifiers have to be the same when you have re-sequenced the same sample more than once e.g. to increase sequencing depth. The pipeline will concatenate the raw reads before performing any downstream analysis. Below is an example for the same sample sequenced across 3 lanes: sample,fastq_1,fastq_2 CONTROL_REP1,AEG588A1_S1_L002_R1_001.fastq.gz,AEG588A1_S1_L002_R2_001.fastq.gz CONTROL_REP1,AEG588A1_S1_L003_R1_001.fastq.gz,AEG588A1_S1_L003_R2_001.fastq.gz CONTROL_REP1,AEG588A1_S1_L004_R1_001.fastq.gz,AEG588A1_S1_L004_R2_001.fastq.gz","title":"Multiple runs of the same sample"},{"location":"usage/#full-samplesheet","text":"The pipeline will auto-detect whether a sample is single- or paired-end using the information provided in the samplesheet. The samplesheet can have as many columns as you desire, however, there is a strict requirement for the first 3 columns to match those defined in the table below. A final samplesheet file consisting of both single- and paired-end data may look something like the one below. This is for 6 samples, where TREATMENT_REP3 has been sequenced twice. sample,fastq_1,fastq_2 CONTROL_REP1,AEG588A1_S1_L002_R1_001.fastq.gz,AEG588A1_S1_L002_R2_001.fastq.gz CONTROL_REP2,AEG588A2_S2_L002_R1_001.fastq.gz,AEG588A2_S2_L002_R2_001.fastq.gz CONTROL_REP3,AEG588A3_S3_L002_R1_001.fastq.gz,AEG588A3_S3_L002_R2_001.fastq.gz TREATMENT_REP1,AEG588A4_S4_L003_R1_001.fastq.gz, TREATMENT_REP2,AEG588A5_S5_L003_R1_001.fastq.gz, TREATMENT_REP3,AEG588A6_S6_L003_R1_001.fastq.gz, TREATMENT_REP3,AEG588A6_S6_L004_R1_001.fastq.gz, Column Description sample Custom sample name. This entry will be identical for multiple sequencing libraries/runs from the same sample. Spaces in sample names are automatically converted to underscores ( _ ). fastq_1 Full path to FastQ file for Illumina short reads 1. File has to be gzipped and have the extension \".fastq.gz\" or \".fq.gz\". fastq_2 Full path to FastQ file for Illumina short reads 2. File has to be gzipped and have the extension \".fastq.gz\" or \".fq.gz\". An example samplesheet has been provided with the pipeline.","title":"Full samplesheet"},{"location":"usage/#running-the-pipeline","text":"The typical command for running the pipeline is as follows: nextflow run dalmolingroup/bulkrna --input samplesheet.csv --outdir <OUTDIR> --transcriptome <PATH TO TRANSCRIPTOME FASTA> --gtf <PATH TO GTF FILE> -profile docker This will launch the pipeline with the docker configuration profile. See below for more information about profiles. Note that the pipeline will create the following files in your working directory: work # Directory containing the nextflow working files <OUTDIR> # Finished results in specified location (defined with --outdir) .nextflow_log # Log file from Nextflow # Other nextflow hidden files, eg. history of pipeline runs and old logs.","title":"Running the pipeline"},{"location":"usage/#updating-the-pipeline","text":"When you run the above command, Nextflow automatically pulls the pipeline code from GitHub and stores it as a cached version. When running the pipeline after this, it will always use the cached version if available - even if the pipeline has been updated since. To make sure that you're running the latest version of the pipeline, make sure that you regularly update the cached version of the pipeline: nextflow pull dalmolingroup/bulkrna","title":"Updating the pipeline"},{"location":"usage/#reproducibility","text":"It is a good idea to specify a pipeline version when running the pipeline on your data. This ensures that a specific version of the pipeline code and software are used when you run your pipeline. If you keep using the same tag, you'll be running the same version of the pipeline, even if there have been changes to the code since. First, go to the dalmolingroup/bulkrna releases page and find the latest version number - numeric only (eg. 1.3.1 ). Then specify this when running the pipeline with -r (one hyphen) - eg. -r 1.3.1 . This version number will be logged in reports when you run the pipeline, so that you'll know what you used when you look back in the future.","title":"Reproducibility"},{"location":"usage/#core-nextflow-arguments","text":"NB: These options are part of Nextflow and use a single hyphen (pipeline parameters use a double-hyphen).","title":"Core Nextflow arguments"},{"location":"usage/#-profile","text":"Use this parameter to choose a configuration profile. Profiles can give configuration presets for different compute environments. Several generic profiles are bundled with the pipeline which instruct the pipeline to use software packaged using different methods (Docker, Singularity, Podman, Shifter, Charliecloud, Conda) - see below. When using Biocontainers, most of these software packaging methods pull Docker containers from quay.io e.g FastQC except for Singularity which directly downloads Singularity images via https hosted by the Galaxy project and Conda which downloads and installs software locally from Bioconda . We highly recommend the use of Docker or Singularity containers for full pipeline reproducibility, however when this is not possible, Conda is also supported. The pipeline also dynamically loads configurations from https://github.com/nf-core/configs when it runs, making multiple config profiles for various institutional clusters available at run time. For more information and to see if your system is available in these configs please see the nf-core/configs documentation . Note that multiple profiles can be loaded, for example: -profile test,docker - the order of arguments is important! They are loaded in sequence, so later profiles can overwrite earlier profiles. If -profile is not specified, the pipeline will run locally and expect all software to be installed and available on the PATH . This is not recommended. docker A generic configuration profile to be used with Docker singularity A generic configuration profile to be used with Singularity podman A generic configuration profile to be used with Podman shifter A generic configuration profile to be used with Shifter charliecloud A generic configuration profile to be used with Charliecloud conda A generic configuration profile to be used with Conda . Please only use Conda as a last resort i.e. when it's not possible to run the pipeline with Docker, Singularity, Podman, Shifter or Charliecloud. test A profile with a complete configuration for automated testing Includes links to test data so needs no other parameters","title":"-profile"},{"location":"usage/#-resume","text":"Specify this when restarting a pipeline. Nextflow will use cached results from any pipeline steps where the inputs are the same, continuing from where it got to previously. For input to be considered the same, not only the names must be identical but the files' contents as well. For more info about this parameter, see this blog post . You can also supply a run name to resume a specific run: -resume [run-name] . Use the nextflow log command to show previous run names.","title":"-resume"},{"location":"usage/#-c","text":"Specify the path to a specific config file (this is a core Nextflow command). See the nf-core website documentation for more information.","title":"-c"},{"location":"usage/#custom-configuration","text":"","title":"Custom configuration"},{"location":"usage/#resource-requests","text":"Whilst the default requirements set within the pipeline will hopefully work for most people and with most input data, you may find that you want to customise the compute resources that the pipeline requests. Each step in the pipeline has a default set of requirements for number of CPUs, memory and time. For most of the steps in the pipeline, if the job exits with any of the error codes specified here it will automatically be resubmitted with higher requests (2 x original, then 3 x original). If it still fails after the third attempt then the pipeline execution is stopped. For example, if the nf-core/rnaseq pipeline is failing after multiple re-submissions of the STAR_ALIGN process due to an exit code of 137 this would indicate that there is an out of memory issue: [62/149eb0] NOTE: Process `NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN (WT_REP1)` terminated with an error exit status (137) -- Execution is retried (1) Error executing process > 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN (WT_REP1)' Caused by: Process `NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN (WT_REP1)` terminated with an error exit status (137) Command executed: STAR \\ --genomeDir star \\ --readFilesIn WT_REP1_trimmed.fq.gz \\ --runThreadN 2 \\ --outFileNamePrefix WT_REP1. \\ <TRUNCATED> Command exit status: 137 Command output: (empty) Command error: .command.sh: line 9: 30 Killed STAR --genomeDir star --readFilesIn WT_REP1_trimmed.fq.gz --runThreadN 2 --outFileNamePrefix WT_REP1. <TRUNCATED> Work dir: /home/pipelinetest/work/9d/172ca5881234073e8d76f2a19c88fb Tip: you can replicate the issue by changing to the process work dir and entering the command `bash .command.run` To bypass this error you would need to find exactly which resources are set by the STAR_ALIGN process. The quickest way is to search for process STAR_ALIGN in the nf-core/rnaseq Github repo . We have standardised the structure of Nextflow DSL2 pipelines such that all module files will be present in the modules/ directory and so, based on the search results, the file we want is modules/nf-core/software/star/align/main.nf . If you click on the link to that file you will notice that there is a label directive at the top of the module that is set to label process_high . The Nextflow label directive allows us to organise workflow processes in separate groups which can be referenced in a configuration file to select and configure subset of processes having similar computing requirements. The default values for the process_high label are set in the pipeline's base.config which in this case is defined as 72GB. Providing you haven't set any other standard nf-core parameters to cap the maximum resources used by the pipeline then we can try and bypass the STAR_ALIGN process failure by creating a custom config file that sets at least 72GB of memory, in this case increased to 100GB. The custom config below can then be provided to the pipeline via the -c parameter as highlighted in previous sections. process { withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN' { memory = 100.GB } } NB: We specify the full process name i.e. NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN in the config file because this takes priority over the short name ( STAR_ALIGN ) and allows existing configuration using the full process name to be correctly overridden. If you get a warning suggesting that the process selector isn't recognised check that the process name has been specified correctly.","title":"Resource requests"},{"location":"usage/#updating-containers","text":"The Nextflow DSL2 implementation of this pipeline uses one container per process which makes it much easier to maintain and update software dependencies. If for some reason you need to use a different version of a particular tool with the pipeline then you just need to identify the process name and override the Nextflow container definition for that process using the withName declaration. For example, in the nf-core/viralrecon pipeline a tool called Pangolin has been used during the COVID-19 pandemic to assign lineages to SARS-CoV-2 genome sequenced samples. Given that the lineage assignments change quite frequently it doesn't make sense to re-release the nf-core/viralrecon everytime a new version of Pangolin has been released. However, you can override the default container used by the pipeline by creating a custom config file and passing it as a command-line argument via -c custom.config . Check the default version used by the pipeline in the module file for Pangolin Find the latest version of the Biocontainer available on Quay.io Create the custom config accordingly: For Docker: nextflow process { withName: PANGOLIN { container = 'quay.io/biocontainers/pangolin:3.0.5--pyhdfd78af_0' } } For Singularity: nextflow process { withName: PANGOLIN { container = 'https://depot.galaxyproject.org/singularity/pangolin:3.0.5--pyhdfd78af_0' } } For Conda: nextflow process { withName: PANGOLIN { conda = 'bioconda::pangolin=3.0.5' } } NB: If you wish to periodically update individual tool-specific results (e.g. Pangolin) generated by the pipeline then you must ensure to keep the work/ directory otherwise the -resume ability of the pipeline will be compromised and it will restart from scratch.","title":"Updating containers"},{"location":"usage/#nf-coreconfigs","text":"In most cases, you will only need to create a custom config as a one-off but if you and others within your organisation are likely to be running nf-core pipelines regularly and need to use the same settings regularly it may be a good idea to request that your custom config file is uploaded to the nf-core/configs git repository. Before you do this please can you test that the config file works with your pipeline of choice using the -c parameter. You can then create a pull request to the nf-core/configs repository with the addition of your config file, associated documentation file (see examples in nf-core/configs/docs ), and amending nfcore_custom.config to include your custom profile. See the main Nextflow documentation for more information about creating your own configuration files. If you have any questions or issues please send us a message on Slack on the #configs channel .","title":"nf-core/configs"},{"location":"usage/#azure-resource-requests","text":"To be used with the azurebatch profile by specifying the -profile azurebatch . We recommend providing a compute params.vm_type of Standard_D16_v3 VMs by default but these options can be changed if required. Note that the choice of VM size depends on your quota and the overall workload during the analysis. For a thorough list, please refer the Azure Sizes for virtual machines in Azure .","title":"Azure Resource Requests"},{"location":"usage/#running-in-the-background","text":"Nextflow handles job submissions and supervises the running jobs. The Nextflow process must run until the pipeline is finished. The Nextflow -bg flag launches Nextflow in the background, detached from your terminal so that the workflow does not stop if you log out of your session. The logs are saved to a file. Alternatively, you can use screen / tmux or similar tool to create a detached session which you can log back into at a later time. Some HPC setups also allow you to run nextflow within a cluster job submitted your job scheduler (from where it submits more jobs).","title":"Running in the background"},{"location":"usage/#nextflow-memory-requirements","text":"In some cases, the Nextflow Java virtual machines can start to request a large amount of memory. We recommend adding the following line to your environment to limit this (typically in ~/.bashrc or ~./bash_profile ): NXF_OPTS='-Xms1g -Xmx4g'","title":"Nextflow memory requirements"}]}